function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var reactBootstrap = require('react-bootstrap');
var Select = _interopDefault(require('react-select'));
var AsyncSelect = _interopDefault(require('react-select/async'));
var axios = _interopDefault(require('axios'));

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var FormBuilder = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(FormBuilder, _React$Component);

  function FormBuilder(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      fields: props.fields
    };
    return _this;
  }

  var _proto = FormBuilder.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.initActions();
  };

  _proto.change = function change(e) {
    this.state.fields.fields[e.target.name]['value'] = e.target.value;
    this.props.onChange(this.state.fields);
  };

  _proto.submit = function submit(e) {
    e.preventDefault();
    this.validate();
  };

  _proto.validate = function validate() {
    var _this2 = this;

    var hasAnyErr = false;
    Object.entries(this.state.fields.fields).map(function (_ref) {
      var key = _ref[0],
          value = _ref[1];

      if (value.errors != null) {
        var errors = value.errors;
      } else {
        var errors = [];
      }

      if (value.min != null) {
        var minMessage = "Field must have minimum " + value.min + " characters";

        if (value.value != null) {
          if (value.value.length != 0) {
            if (value.value.length < value.min) {
              hasAnyErr = true;

              if (errors.indexOf() == -1) {
                errors.push(minMessage);
              }
            } else {
              if (errors.indexOf(minMessage) > -1) {
                errors.splice(errors.indexOf(minMessage), 1);
              }
            }
          } else {
            if (errors.indexOf(minMessage) > -1) {
              errors.splice(errors.indexOf(minMessage), 1);
            }
          }
        }
      }

      if (value.max != null) {
        var maxMessage = "Field must have maximum " + value.max + " characters only";

        if (value.value != null) {
          if (value.value.length > value.max) {
            hasAnyErr = true;

            if (errors.indexOf() == -1) {
              errors.push(maxMessage);
            }
          } else {
            if (errors.indexOf(maxMessage) > -1) {
              errors.splice(errors.indexOf(maxMessage), 1);
            }
          }
        }
      }

      if (value.required == true) {
        if (value.requireMessage) {
          var requiredMessage = value.requireMessage;
        } else {
          var requiredMessage = "Mindatory Field";
        }

        if (value.value == null || value.value == "") {
          hasAnyErr = true;

          if (errors.indexOf(requiredMessage) == -1) {
            errors.push(requiredMessage);
          }
        } else {
          if (errors != null) {
            var erindex = errors.indexOf(requiredMessage);

            if (erindex > -1) {
              errors.splice(erindex, 1);
            }
          }
        }
      }

      if (errors) {
        if (errors.length != 0) {
          hasAnyErr = true;
        }
      }

      _this2.state.fields.fields[key]['errors'] = errors;
    });
    this.props.onChange(this.state.fields);

    if (hasAnyErr == false) {
      this.props.onSubmit(this.state.fields);
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(previousProps) {
    if (this.props.fields != this.state.fields) {
      this.setState({
        fields: this.props.fields
      });
    }
  };

  _proto.selectChange = function selectChange(name) {
    return function (val) {
      this.state.fields.fields[name]['value'] = val;
      this.props.onChange(this.state.fields);
    }.bind(this);
  };

  _proto.radioChange = function radioChange(e) {
    var name = e.target.name;
    var fieldData = this.state.fields;
    fieldData.fields[name]["value"] = e.target.value;
    this.setState({
      fields: fieldData
    });
    this.props.onChange(this.state.fields);
  };

  _proto.checkBoxChange = function checkBoxChange(e) {
    var name = e.target.name;
    var fieldData = this.state.fields;
    var array = new Array();
    array = array || [];

    if (fieldData.fields[name]['value'] != null) {
      array = fieldData.fields[name]["value"];
      array = array || [];
    }

    if (e.target.checked) {
      array.push(e.target.value);
    } else {
      array.splice(array.indexOf(e.target.value), 1);
    }

    fieldData.fields[name]["value"] = array;
    this.setState({
      fields: fieldData
    });
    this.props.onChange(this.state.fields);
  };

  _proto.fieldError = function fieldError(errors) {
    var er = "";

    if (errors != null) {
      er = Object.entries(errors).map(function (_ref2) {
        var err = _ref2[1];
        return /*#__PURE__*/React.createElement(reactBootstrap.Form.Text, {
          className: "text-danger"
        }, err);
      });
    }

    return er;
  };

  _proto.submitCallBack = function submitCallBack() {
    this.validate();
  };

  _proto.initActions = function initActions() {
    this.state.fields.submit = this.submitCallBack.bind(this);
    this.state.fields.getFormData = this.getFormData.bind(this);

    if (this.props.getActions) {
      this.props.getActions(this.state.fields);
    }
  };

  _proto.requiredFieldStar = function requiredFieldStar(field) {
    if (field.required) {
      return /*#__PURE__*/React.createElement("span", {
        className: "text-danger"
      }, "*");
    }
  };

  _proto.getFields = function getFields() {
    var _this3 = this;

    var res = Object.entries(this.state.fields.fields).map(function (_ref3) {
      var key = _ref3[0],
          value = _ref3[1];
      _this3.state.fields.fields[key]["actions"] = React.createRef();

      if (value.type == "textarea") {
        return /*#__PURE__*/React.createElement("div", {
          key: "field-" + key
        }, /*#__PURE__*/React.createElement(reactBootstrap.Form.Group, null, /*#__PURE__*/React.createElement(reactBootstrap.Form.Label, null, value.label, " ", _this3.requiredFieldStar(value)), /*#__PURE__*/React.createElement("textarea", {
          onChange: _this3.change.bind(_this3),
          ref: _this3.state.fields.fields[key]["actions"],
          className: "form-control",
          type: value.type,
          name: key,
          readOnly: value.readOnly == true ? true : false,
          value: value.value != null ? value.value : "",
          placeholder: value.placeholder != null && value.placeholder
        }), _this3.fieldError(value.errors)));
      } else if (value.type == "select") {
        return /*#__PURE__*/React.createElement("div", {
          key: "field-" + key
        }, /*#__PURE__*/React.createElement(reactBootstrap.Form.Group, null, /*#__PURE__*/React.createElement(reactBootstrap.Form.Label, null, value.label, " ", _this3.requiredFieldStar(value)), _this3.state.fields.fields[key]['url'] ? /*#__PURE__*/React.createElement(AsyncSelect, {
          name: key,
          ref: _this3.state.fields.fields[key]["actions"],
          placeholder: value.placeholder != null && value.placeholder,
          isMulti: value.multiple != null ? value.multiple : false,
          autoFocus: value.autofocus != null ? value.autofocus : false,
          value: value.value != null ? value.value : "",
          onChange: _this3.selectChange(key),
          className: "form-builder-select",
          cacheOptions: true,
          defaultOptions: true,
          loadOptions: function loadOptions(inputValue) {
            try {
              var minSearchLen = _this3.state.fields.fields[key]["minSearchLen"] != null ? _this3.state.fields.fields[key]["minSearchLen"] : 2;
              return Promise.resolve(function () {
                if (inputValue.length >= minSearchLen) {
                  return Promise.resolve(axios.get(_this3.state.fields.fields[key]["url"] + "?query=" + inputValue)).then(function (req) {
                    return req.data.data;
                  });
                }
              }());
            } catch (e) {
              return Promise.reject(e);
            }
          }
        }) : /*#__PURE__*/React.createElement(Select, {
          name: key,
          ref: _this3.state.fields.fields[key]["actions"],
          placeholder: value.placeholder != null && value.placeholder,
          isMulti: value.multiple != null ? value.multiple : false,
          autoFocus: value.autofocus != null ? value.autofocus : false,
          options: value.options,
          value: value.value != null ? value.value : "",
          onChange: _this3.selectChange(key),
          className: "form-builder-select"
        }), _this3.fieldError(value.errors)));
      } else if (value.type == "file") {
        return /*#__PURE__*/React.createElement("div", {
          key: "field-" + key
        }, /*#__PURE__*/React.createElement(reactBootstrap.Form.Group, null, /*#__PURE__*/React.createElement(reactBootstrap.Form.File, {
          ref: _this3.state.fields.fields[key]["actions"],
          label: value.name,
          name: value.key
        }), _this3.fieldError(value.errors)));
      } else if (value.type == "submit") {
        return /*#__PURE__*/React.createElement(reactBootstrap.Button, {
          type: "submit",
          className: value.color
        }, value.label);
      } else if (value.type == "checkbox") {
        return /*#__PURE__*/React.createElement("div", {
          key: "field-" + key
        }, /*#__PURE__*/React.createElement(reactBootstrap.Form.Group, {
          ref: _this3.state.fields.fields[key]["actions"]
        }, /*#__PURE__*/React.createElement(reactBootstrap.Form.Label, null, value.label, " ", _this3.requiredFieldStar(value)), Object.entries(value.options).map(function (_ref4) {
          var v = _ref4[1];
          var ischecked = false;

          if (value.value != null) {
            var array = value.value;
            array = array || [];

            if (array.includes(v.value)) {
              ischecked = true;
            }
          }

          return /*#__PURE__*/React.createElement(reactBootstrap.Form.Check, {
            type: "checkbox",
            checked: ischecked,
            name: key,
            onChange: _this3.checkBoxChange.bind(_this3),
            label: v.label,
            value: v.value
          });
        }), _this3.fieldError(value.errors)));
      } else if (value.type == "radio") {
        return /*#__PURE__*/React.createElement("div", {
          key: "field-" + key
        }, /*#__PURE__*/React.createElement(reactBootstrap.Form.Group, {
          ref: _this3.state.fields.fields[key]["actions"]
        }, /*#__PURE__*/React.createElement(reactBootstrap.Form.Label, null, value.label, " ", _this3.requiredFieldStar(value)), Object.entries(value.options).map(function (_ref5) {
          var v = _ref5[1];
          var checked = false;

          if (value != null) {
            if (value.value == v.value) {
              checked = true;
            }
          }

          return /*#__PURE__*/React.createElement(reactBootstrap.Form.Check, {
            type: "radio",
            name: key,
            checked: checked,
            onChange: _this3.radioChange.bind(_this3),
            label: v.label,
            value: v.value
          });
        }), _this3.fieldError(value.errors)));
      } else if (value.type == "number") {
        return /*#__PURE__*/React.createElement("div", {
          key: "field-" + key
        }, /*#__PURE__*/React.createElement(reactBootstrap.Form.Group, null, /*#__PURE__*/React.createElement(reactBootstrap.Form.Label, null, value.label, " ", _this3.requiredFieldStar(value)), /*#__PURE__*/React.createElement(reactBootstrap.InputGroup, null, value.prefix && /*#__PURE__*/React.createElement(reactBootstrap.InputGroup.Text, {
          id: "basic-addon1"
        }, value.prefix), /*#__PURE__*/React.createElement(reactBootstrap.Form.Control, {
          ref: _this3.state.fields.fields[key]["actions"],
          onChange: _this3.change.bind(_this3),
          readOnly: value.readOnly == true ? true : false,
          type: value.type,
          name: key,
          value: value.value != null ? value.value : "",
          placeholder: value.placeholder != null && value.placeholder
        }), value.suffix && /*#__PURE__*/React.createElement(reactBootstrap.InputGroup.Text, {
          id: "basic-addon1"
        }, value.suffix)), _this3.fieldError(value.errors)));
      } else {
        return /*#__PURE__*/React.createElement("div", {
          key: "field-" + key
        }, /*#__PURE__*/React.createElement(reactBootstrap.Form.Group, null, /*#__PURE__*/React.createElement(reactBootstrap.Form.Label, null, value.label, " ", _this3.requiredFieldStar(value)), /*#__PURE__*/React.createElement(reactBootstrap.InputGroup, null, value.prefix && /*#__PURE__*/React.createElement(reactBootstrap.InputGroup.Text, {
          id: "basic-addon1"
        }, value.prefix), /*#__PURE__*/React.createElement(reactBootstrap.Form.Control, {
          ref: _this3.state.fields.fields[key]["actions"],
          onChange: _this3.change.bind(_this3),
          readOnly: value.readOnly == true ? true : false,
          type: value.type,
          name: key,
          value: value.value != null ? value.value : "",
          placeholder: value.placeholder != null && value.placeholder
        }), value.suffix && /*#__PURE__*/React.createElement(reactBootstrap.InputGroup.Text, {
          id: "basic-addon1"
        }, value.suffix)), _this3.fieldError(value.errors)));
      }
    });
    return res;
  };

  _proto.getFormData = function getFormData() {
    var formData = new FormData();
    Object.entries(this.state.fields.fields).map(function (_ref6) {
      var k = _ref6[0],
          v = _ref6[1];

      if (v.required == true) {
        if (v.type == "select" || v.type == "checkbox" || v.type == "radio") {
          formData.append(k, v.value.value);
        } else {
          formData.append(k, v.value);
        }
      } else {
        if (v.value) {
          if (v.type == "select" || v.type == "checkbox" || v.type == "radio") {
            formData.append(k, v.value.value);
          } else {
            formData.append(k, v.value);
          }
        }
      }
    });
    return formData;
  };

  _proto.render = function render() {
    var res = this.getFields();
    return /*#__PURE__*/React.createElement(reactBootstrap.Form, {
      onSubmit: this.submit.bind(this)
    }, res);
  };

  return FormBuilder;
}(React.Component);

module.exports = FormBuilder;
//# sourceMappingURL=index.js.map
